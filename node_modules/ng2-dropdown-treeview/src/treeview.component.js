var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, Input, Output, EventEmitter, TemplateRef } from '@angular/core';
import * as _ from 'lodash';
import { TreeviewI18n } from './treeview-i18n';
import { TreeviewItem } from './treeview-item';
import { TreeviewConfig } from './treeview-config';
import { TreeviewEventParser } from './treeview-event-parser';
var FilterTreeviewItem = (function (_super) {
    __extends(FilterTreeviewItem, _super);
    function FilterTreeviewItem(item) {
        var _this = _super.call(this, {
            text: item.text,
            value: item.value,
            disabled: item.disabled,
            checked: item.checked,
            collapsed: item.collapsed,
            children: item.children
        }) || this;
        _this.refItem = item;
        return _this;
    }
    FilterTreeviewItem.prototype.updateRefChecked = function () {
        if (!_.isNil(this.children)) {
            this.children.forEach(function (child) {
                if (child instanceof FilterTreeviewItem) {
                    child.updateRefChecked();
                }
            });
        }
        var refChecked = this.checked;
        if (!_.isNil(this.refItem.children)) {
            for (var i = 0; i < this.refItem.children.length; i++) {
                var refChild = this.refItem.children[i];
                if (refChild instanceof FilterTreeviewItem) {
                    refChild.updateRefChecked();
                }
                if (!refChild.checked) {
                    refChecked = false;
                    break;
                }
            }
        }
        this.refItem.checked = refChecked;
    };
    return FilterTreeviewItem;
}(TreeviewItem));
var TreeviewComponent = (function () {
    function TreeviewComponent(i18n, defaultConfig, eventParser) {
        this.i18n = i18n;
        this.defaultConfig = defaultConfig;
        this.eventParser = eventParser;
        this.selectedChange = new EventEmitter();
        this.config = this.defaultConfig;
        this.allItem = new TreeviewItem({ text: 'All', value: undefined });
    }
    Object.defineProperty(TreeviewComponent.prototype, "hasItems", {
        get: function () {
            return !_.isNil(this.items) && this.items.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeviewComponent.prototype, "hasFilterItems", {
        get: function () {
            return !_.isNil(this.filterItems) && this.filterItems.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeviewComponent.prototype, "maxHeight", {
        get: function () {
            return "" + this.config.maxHeight;
        },
        enumerable: true,
        configurable: true
    });
    TreeviewComponent.prototype.ngOnChanges = function (changes) {
        var itemsSimpleChange = changes['items'];
        if (!_.isNil(itemsSimpleChange)) {
            this.updateFilterItems();
            this.updateCollapsedAll();
            this.raiseSelectedChange();
        }
    };
    TreeviewComponent.prototype.toggleCollapseExpand = function () {
        var _this = this;
        this.allItem.collapsed = !this.allItem.collapsed;
        if (!_.isNil(this.filterItems)) {
            this.filterItems.forEach(function (item) { return item.setCollapsedRecursive(_this.allItem.collapsed); });
        }
    };
    TreeviewComponent.prototype.onFilterTextChange = function () {
        this.updateFilterItems();
    };
    TreeviewComponent.prototype.onAllCheckedChange = function (checked) {
        this.filterItems.forEach(function (item) {
            item.setCheckedRecursive(checked);
            if (item instanceof FilterTreeviewItem) {
                item.updateRefChecked();
            }
        });
        this.raiseSelectedChange();
    };
    TreeviewComponent.prototype.onItemCheckedChange = function (item, checked) {
        if (this.allItem.checked !== checked) {
            var allItemChecked = true;
            for (var i = 0; i < this.filterItems.length; i++) {
                if (!this.filterItems[i].checked) {
                    allItemChecked = false;
                    break;
                }
            }
            if (this.allItem.checked !== allItemChecked) {
                this.allItem.checked = allItemChecked;
            }
        }
        if (item instanceof FilterTreeviewItem) {
            item.updateRefChecked();
        }
        this.raiseSelectedChange();
    };
    TreeviewComponent.prototype.raiseSelectedChange = function () {
        this.checkedItems = this.getCheckedItems();
        var values = this.eventParser.getSelectedChange(this);
        this.selectedChange.emit(values);
    };
    TreeviewComponent.prototype.getCheckedItems = function () {
        var checkedItems = [];
        if (!_.isNil(this.items)) {
            for (var i = 0; i < this.items.length; i++) {
                checkedItems = _.concat(checkedItems, this.items[i].getCheckedItems());
            }
        }
        return checkedItems;
    };
    TreeviewComponent.prototype.updateFilterItems = function () {
        var _this = this;
        if (!_.isNil(this.items) && _.isString(this.filterText) && this.filterText !== '') {
            var filterItems_1 = [];
            var filterText_1 = this.filterText.toLowerCase();
            this.items.forEach(function (item) {
                var newItem = _this.filterItem(item, filterText_1);
                if (!_.isNil(newItem)) {
                    filterItems_1.push(newItem);
                }
            });
            this.filterItems = filterItems_1;
        }
        else {
            this.filterItems = this.items;
        }
        this.updateCheckedAll();
    };
    TreeviewComponent.prototype.filterItem = function (item, filterText) {
        var _this = this;
        var isMatch = _.includes(item.text.toLowerCase(), filterText);
        if (isMatch) {
            return item;
        }
        else {
            if (!_.isNil(item.children)) {
                var children_1 = [];
                var checkedCount_1 = 0;
                if (!_.isNil(item.children)) {
                    item.children.forEach(function (child) {
                        var newChild = _this.filterItem(child, filterText);
                        if (!_.isNil(newChild)) {
                            children_1.push(newChild);
                            if (newChild.checked) {
                                checkedCount_1++;
                            }
                        }
                    });
                    if (children_1.length > 0) {
                        var newItem = new FilterTreeviewItem(item);
                        newItem.children = children_1;
                        return newItem;
                    }
                }
            }
        }
        return undefined;
    };
    TreeviewComponent.prototype.updateCheckedAll = function () {
        if (!_.isNil(this.filterItems)) {
            var hasItemUnchecked = false;
            for (var i = 0; i < this.filterItems.length; i++) {
                if (!this.filterItems[i].checked) {
                    hasItemUnchecked = true;
                    break;
                }
            }
            if (this.allItem.checked === hasItemUnchecked) {
                this.allItem.checked = !hasItemUnchecked;
            }
        }
    };
    TreeviewComponent.prototype.updateCollapsedAll = function () {
        var hasItemExpanded = false;
        if (!_.isNil(this.filterItems)) {
            for (var i = 0; i < this.filterItems.length; i++) {
                if (!this.filterItems[i].collapsed) {
                    hasItemExpanded = true;
                    break;
                }
            }
        }
        this.allItem.collapsed = !hasItemExpanded;
    };
    return TreeviewComponent;
}());
__decorate([
    Input(),
    __metadata("design:type", TemplateRef)
], TreeviewComponent.prototype, "template", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], TreeviewComponent.prototype, "items", void 0);
__decorate([
    Input(),
    __metadata("design:type", TreeviewConfig)
], TreeviewComponent.prototype, "config", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], TreeviewComponent.prototype, "selectedChange", void 0);
TreeviewComponent = __decorate([
    Component({
        selector: 'leo-treeview',
        template: "\n<template #tpl let-item=\"item\"\n    let-toggleCollapseExpand=\"toggleCollapseExpand\"\n    let-onCheckedChange=\"onCheckedChange\">\n    <div class=\"form-check\">\n        <i *ngIf=\"item.children\" (click)=\"toggleCollapseExpand()\" aria-hidden=\"true\"\n            class=\"fa\" [class.fa-caret-right]=\"item.collapsed\" [class.fa-caret-down]=\"!item.collapsed\"></i>\n        <label class=\"form-check-label\">\n            <input type=\"checkbox\" class=\"form-check-input\"\n                [(ngModel)]=\"item.checked\" (ngModelChange)=\"onCheckedChange()\" [disabled]=\"item.disabled\" />\n            {{item.text}}\n        </label>\n    </div>\n</template>\n<div class=\"treeview-header\">\n    <div *ngIf=\"config.isShowFilter\" class=\"row\">\n        <div class=\"col-12\">\n            <input class=\"form-control\" type=\"text\" [placeholder]=\"i18n.filterPlaceholder()\"\n                [(ngModel)]=\"filterText\" (ngModelChange)=\"onFilterTextChange()\" />\n        </div>\n    </div>\n    <div *ngIf=\"hasFilterItems\">\n        <div *ngIf=\"config.isShowAllCheckBox || config.isShowCollapseExpand\" class=\"row\">\n            <div class=\"col-12\" [class.row-margin]=\"config.isShowFilter && (config.isShowAllCheckBox || config.isShowCollapseExpand)\">\n                <label *ngIf=\"config.isShowAllCheckBox\" class=\"form-check-label label-item-all\">\n                    <input type=\"checkbox\" class=\"form-check-input\"\n                        [(ngModel)]=\"allItem.checked\" (ngModelChange)=\"onAllCheckedChange($event)\" />\n                        {{i18n.allCheckboxText()}}\n                </label>\n                <label *ngIf=\"config.isShowCollapseExpand\" class=\"pull-right label-collapse-expand\" (click)=\"toggleCollapseExpand()\">\n                    <i [title]=\"i18n.tooltipCollapseExpand(allItem.collapsed)\" aria-hidden=\"true\"\n                        class=\"fa\" [class.fa-expand]=\"allItem.collapsed\" [class.fa-compress]=\"!allItem.collapsed\"></i>\n                </label>\n            </div>\n        </div>\n        <div *ngIf=\"config.isShowFilter || config.isShowAllCheckBox || config.isShowCollapseExpand\" class=\"divider\"></div>\n    </div>\n</div>\n<div class=\"treeview-container\" [style.max-height.px]=\"maxHeight\">\n    <div *ngFor=\"let item of filterItems\">\n        <leo-treeview-item [item]=\"item\" [template]=\"template || tpl\" (checkedChange)=\"onItemCheckedChange(item, $event)\">\n        </leo-treeview-item>\n    </div>\n</div>\n<div *ngIf=\"!hasFilterItems\" class=\"treeview-text\">\n    {{i18n.filterNoItemsFoundText()}}\n</div>",
        styles: ["\n.row-margin {\n    margin-top: .3rem;\n}\n.label-item-all {\n}\n.label-collapse-expand {\n    margin: 0;\n    padding: 0 .3rem;\n    cursor: pointer;\n}\n.divider {\n    height: 1px;\n    margin: 0.5rem 0;\n    overflow: hidden;\n    background: #000;\n}\n.treeview-container {\n    overflow-x: hidden;\n    overflow-y: auto;\n    padding-right: 18px;\n}\n.treeview-text {\n    padding: .3rem 0;\n    white-space: nowrap;\n}\n"]
    }),
    __metadata("design:paramtypes", [TreeviewI18n,
        TreeviewConfig,
        TreeviewEventParser])
], TreeviewComponent);
export { TreeviewComponent };
//# sourceMappingURL=treeview.component.js.map