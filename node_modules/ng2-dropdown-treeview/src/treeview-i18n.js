var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Injectable } from '@angular/core';
var TreeviewI18n = (function () {
    function TreeviewI18n() {
    }
    return TreeviewI18n;
}());
TreeviewI18n = __decorate([
    Injectable()
], TreeviewI18n);
export { TreeviewI18n };
var TreeviewI18nDefault = (function (_super) {
    __extends(TreeviewI18nDefault, _super);
    function TreeviewI18nDefault() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TreeviewI18nDefault.prototype.getText = function (checkededItems, isAll) {
        if (isAll) {
            return 'All';
        }
        switch (checkededItems.length) {
            case 0:
                return 'Select options';
            case 1:
                return checkededItems[0].text;
            default:
                return checkededItems.length + " options selected";
        }
    };
    TreeviewI18nDefault.prototype.allCheckboxText = function () {
        return 'All';
    };
    TreeviewI18nDefault.prototype.filterPlaceholder = function () {
        return 'Filter';
    };
    TreeviewI18nDefault.prototype.filterNoItemsFoundText = function () {
        return 'No items found';
    };
    TreeviewI18nDefault.prototype.tooltipCollapseExpand = function (isCollapse) {
        return isCollapse ? 'Expand' : 'Collapse';
    };
    return TreeviewI18nDefault;
}(TreeviewI18n));
TreeviewI18nDefault = __decorate([
    Injectable()
], TreeviewI18nDefault);
export { TreeviewI18nDefault };
//# sourceMappingURL=treeview-i18n.js.map