var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, EventEmitter, Input, Output, HostListener, ViewChild, TemplateRef } from '@angular/core';
import * as _ from 'lodash';
import { TreeviewI18n } from './treeview-i18n';
import { TreeviewConfig } from './treeview-config';
import { TreeviewComponent } from './treeview.component';
var DropdownTreeviewComponent = (function () {
    function DropdownTreeviewComponent(i18n, defaultConfig) {
        this.i18n = i18n;
        this.defaultConfig = defaultConfig;
        this.hide = new EventEmitter();
        this.selectedChange = new EventEmitter(true);
        this.isOpen = false;
        this.config = this.defaultConfig;
    }
    DropdownTreeviewComponent.prototype.onKeyupEsc = function () {
        this.isOpen = false;
    };
    DropdownTreeviewComponent.prototype.onDocumentClick = function (event) {
        if (this.mouseEvent !== event) {
            this.isOpen = false;
        }
    };
    Object.defineProperty(DropdownTreeviewComponent.prototype, "hasItems", {
        get: function () {
            return !_.isNil(this.items) && this.items.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    DropdownTreeviewComponent.prototype.getText = function () {
        if (this.treeviewComponent) {
            return this.i18n.getText(this.treeviewComponent.checkedItems, this.treeviewComponent.allItem.checked);
        }
        return '';
    };
    DropdownTreeviewComponent.prototype.onSelectedChange = function (values) {
        this.selectedChange.emit(values);
    };
    DropdownTreeviewComponent.prototype.onButtonClick = function (event) {
        this.mouseEvent = event;
        this.isOpen = !this.isOpen;
        if (!this.isOpen) {
            this.hide.emit();
        }
    };
    return DropdownTreeviewComponent;
}());
__decorate([
    Input(),
    __metadata("design:type", TemplateRef)
], DropdownTreeviewComponent.prototype, "template", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], DropdownTreeviewComponent.prototype, "items", void 0);
__decorate([
    Input(),
    __metadata("design:type", TreeviewConfig)
], DropdownTreeviewComponent.prototype, "config", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], DropdownTreeviewComponent.prototype, "hide", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], DropdownTreeviewComponent.prototype, "selectedChange", void 0);
__decorate([
    ViewChild(TreeviewComponent),
    __metadata("design:type", TreeviewComponent)
], DropdownTreeviewComponent.prototype, "treeviewComponent", void 0);
__decorate([
    HostListener('keyup.esc'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], DropdownTreeviewComponent.prototype, "onKeyupEsc", null);
__decorate([
    HostListener('document:click', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [MouseEvent]),
    __metadata("design:returntype", void 0)
], DropdownTreeviewComponent.prototype, "onDocumentClick", null);
DropdownTreeviewComponent = __decorate([
    Component({
        selector: 'leo-dropdown-treeview',
        template: "\n<div class=\"dropdown\" [class.show]=\"isOpen\">\n    <button class=\"btn btn-secondary dropdown-toggle\" type=\"button\" role=\"button\" (click)=\"onButtonClick($event)\"\n        aria-haspopup=\"true\" aria-expanded=\"false\">\n        {{getText()}}\n    </button>\n    <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\" (click)=\"$event.stopPropagation()\">\n        <div class=\"dropdown-container\">\n            <leo-treeview [items]=\"items\" [template]=\"template\" [config]=\"config\" (selectedChange)=\"onSelectedChange($event)\">\n            </leo-treeview>\n        </div>\n    </div>\n</div>\n    ",
        styles: ["\n.dropdown {\n    width: 100%;\n    display: inline-block;\n}\n.dropdown button {\n    width: 100%;\n    margin-right: .9rem;\n    text-align: left;\n}\n.dropdown button::after {\n    position: absolute;\n    right: .6rem;\n    margin-top: .6rem;\n}\n.dropdown .dropdown-menu .row {\n    padding: 2px 10px;\n}\n.dropdown .dropdown-menu .dropdown-item-collapse-expand {\n    padding: 0;\n}\n.dropdown .dropdown-menu .dropdown-container {\n    padding: 0 .6rem;\n}\n    "]
    }),
    __metadata("design:paramtypes", [TreeviewI18n,
        TreeviewConfig])
], DropdownTreeviewComponent);
export { DropdownTreeviewComponent };
//# sourceMappingURL=dropdown-treeview.component.js.map