var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, EventEmitter, Input, Output, TemplateRef } from '@angular/core';
import * as _ from 'lodash';
import { TreeviewItem } from './treeview-item';
var TreeviewItemComponent = (function () {
    function TreeviewItemComponent() {
        var _this = this;
        this.checkedChange = new EventEmitter();
        this.toggleCollapseExpand = function () {
            _this.item.collapsed = !_this.item.collapsed;
        };
        this.onCheckedChange = function () {
            var checked = _this.item.checked;
            if (!_.isNil(_this.item.children)) {
                _this.item.children.forEach(function (child) { return child.setCheckedRecursive(checked); });
            }
            _this.checkedChange.emit(checked);
        };
    }
    TreeviewItemComponent.prototype.onChildCheckedChange = function (child, checked) {
        if (this.item.checked !== checked) {
            var itemChecked = true;
            for (var i = 0; i < this.item.children.length; i++) {
                if (!this.item.children[i].checked) {
                    itemChecked = false;
                    break;
                }
            }
            this.item.checked = itemChecked;
        }
        this.checkedChange.emit(checked);
    };
    return TreeviewItemComponent;
}());
__decorate([
    Input(),
    __metadata("design:type", TemplateRef)
], TreeviewItemComponent.prototype, "template", void 0);
__decorate([
    Input(),
    __metadata("design:type", TreeviewItem)
], TreeviewItemComponent.prototype, "item", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], TreeviewItemComponent.prototype, "checkedChange", void 0);
TreeviewItemComponent = __decorate([
    Component({
        selector: 'leo-treeview-item',
        template: "\n<div class=\"treeview-item\">\n    <template [ngTemplateOutlet]=\"template\"\n        [ngOutletContext]=\"{item: item, toggleCollapseExpand: toggleCollapseExpand, onCheckedChange: onCheckedChange}\">\n    </template>\n    <div *ngIf=\"!item.collapsed\">\n        <leo-treeview-item *ngFor=\"let child of item.children\" [item]=\"child\" [template]=\"template\"\n            (checkedChange)=\"onChildCheckedChange(child, $event)\">\n        </leo-treeview-item>\n    </div>\n</div>\n    ",
        styles: ["\n:host {\n    display: block;\n}\n:host /deep/ .fa {\n    margin-right: .2rem;\n    width: .5rem;\n    cursor: pointer;\n}\n.treeview-item {\n    white-space: nowrap;\n}\n.treeview-item .treeview-item {\n    margin-left: 2rem;\n}\n    "]
    })
], TreeviewItemComponent);
export { TreeviewItemComponent };
//# sourceMappingURL=treeview-item.component.js.map